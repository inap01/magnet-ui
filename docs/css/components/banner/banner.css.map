{"version":3,"sourceRoot":"","sources":["../../../../src/styles/components/banner/banner.scss","../../../../src/styles/components/banner/_mixins.scss","../../../../src/styles/lib/_spacing.scss","../../../../src/styles/lib/_typography.scss"],"names":[],"mappings":"AAGA,eCKI,kBACA,aACA,sBACA,YDLA,uCCSA,aCoDA,iBACA,oBANA,kBACA,mBFtDI,4DCgBJ,oBCTA,eAYA,kBFfI,4DGRJ,eACA,gBACA,iBACA,iBHUA,uCCiBA,aACA,2BCpBA,iBAkCA,oBAYA,kBACA,mBDlBA,2BACI,mCACA,wBAGI,oEACI,wBAKA,uEACI,wBADJ,uEACI,wBADJ,qEACI,sBAMR,qEACI,mCAIA,wBAMA,wEACI,mCAIA,wBALJ,wEACI,mCAIA,wBALJ,sEACI,iCAIA,sBAlChB,0BACI,mCACA,wBAGI,mEACI,wBAKA,sEACI,wBADJ,sEACI,wBADJ,oEACI,sBAMR,oEACI,mCAIA,wBAMA,uEACI,mCAIA,wBALJ,uEACI,mCAIA,wBALJ,qEACI,iCAIA","file":"banner.css","sourcesContent":["@use \"./mixins\";\n\n// Basic styles\n.magnet-banner {\n    @include mixins.Banner();\n\n    .magnet-banner--content {\n        @include mixins.BannerContent();\n\n        .magnet-banner--icon {\n            @include mixins.BannerIcon();\n        }\n\n        .magnet-banner-title {\n            @include mixins.BannerTitle();\n        }\n    }\n\n    .magnet-banner--actions {\n        @include mixins.BannerActions();\n    }\n}\n\n// Light Theme\n.theme-light {\n    @include mixins.BannerTheme(light);\n}\n\n// Dark theme\n.theme-dark {\n    @include mixins.BannerTheme(dark);\n}\n","@use \"../../lib/design-tokens\";\n@use \"../../lib/elevation\";\n@use \"../../lib/spacing\";\n@use \"../../lib/typography\";\n\n@use \"./variables\";\n\n@mixin Banner() {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    border: none;\n}\n\n@mixin BannerContent() {\n    display: flex;\n    @include spacing.PaddingVertical(\n        variables.$banner-content-padding-vertical\n    );\n    @include spacing.PaddingHorizontal(\n        variables.$banner-content-padding-horizontal\n    );\n}\n\n@mixin BannerIcon() {\n    display: inline-flex;\n    @include spacing.MarginTop(1);\n    @include spacing.MarginRight(4);\n}\n\n@mixin BannerTitle() {\n    @include typography.Typography(\"h5\");\n}\n\n@mixin BannerActions() {\n    display: flex;\n    flex-direction: row-reverse;\n    @include spacing.MarginTop(variables.$banner-actions-padding-top);\n    @include spacing.PaddingBottom(variables.$banner-actions-padding-bottom);\n    @include spacing.PaddingHorizontal(\n        variables.$banner-actions-padding-horizontal\n    );\n}\n\n@mixin BannerTheme($colorMode) {\n    &.magnet-banner {\n        background-color: design-tokens.getTokenColor(surface, $colorMode);\n        color: design-tokens.getTokenColor(on-surface, $colorMode);\n\n        &.magnet-banner--info {\n            .magnet-banner--icon {\n                color: design-tokens.getTokenColor(primary, $colorMode);\n            }\n        }\n        @each $color in variables.$available-colors {\n            &.magnet-banner--#{$color} {\n                .magnet-banner--icon {\n                    color: design-tokens.getTokenColor($color, $colorMode);\n                }\n            }\n        }\n\n        &.magnet-banner--filled {\n            &.magnet-banner--info {\n                background-color: design-tokens.getTokenColor(\n                    primary-container,\n                    $colorMode\n                );\n                color: design-tokens.getTokenColor(\n                    on-primary-container,\n                    $colorMode\n                );\n            }\n            @each $color in variables.$available-colors {\n                &.magnet-banner--#{$color} {\n                    background-color: design-tokens.getTokenColor(\n                        #{$color}-container,\n                        $colorMode\n                    );\n                    color: design-tokens.getTokenColor(\n                        on-#{$color}-container,\n                        $colorMode\n                    );\n                }\n            }\n        }\n    }\n}\n","@use \"sass:map\";\n\n@use \"../variables/spacing\";\n\n@function spacing($size) {\n    @if ($size == \"auto\") {\n        @return auto;\n    }\n    @return spacing.$spacing * $size;\n}\n\n@mixin Margin($size) {\n    margin: spacing($size);\n}\n\n@mixin MarginTop($size) {\n    margin-top: spacing($size);\n}\n\n@mixin MarginBottom($size) {\n    margin-bottom: spacing($size);\n}\n\n@mixin MarginLeft($size) {\n    margin-left: spacing($size);\n}\n\n@mixin MarginRight($size) {\n    margin-right: spacing($size);\n}\n\n@mixin MarginHorizontal($size) {\n    margin-left: spacing($size);\n    margin-right: spacing($size);\n}\n\n@mixin MarginVertical($size) {\n    margin-top: spacing($size);\n    margin-bottom: spacing($size);\n}\n\n@mixin Padding($size) {\n    padding: spacing($size);\n}\n\n@mixin PaddingTop($size) {\n    padding-top: spacing($size);\n}\n\n@mixin PaddingBottom($size) {\n    padding-bottom: spacing($size);\n}\n\n@mixin PaddingLeft($size) {\n    padding-left: spacing($size);\n}\n\n@mixin PaddingRight($size) {\n    padding-right: spacing($size);\n}\n\n@mixin PaddingHorizontal($size) {\n    padding-left: spacing($size);\n    padding-right: spacing($size);\n}\n\n@mixin PaddingVertical($size) {\n    padding-top: spacing($size);\n    padding-bottom: spacing($size);\n}\n","@use \"sass:map\";\n\n@use \"../variables/typography\";\n\n@mixin Typography($name) {\n    font-size: map-get(map-get(typography.$typography, $name), \"font-size\");\n    font-weight: map-get(map-get(typography.$typography, $name), \"font-weight\");\n    line-height: map-get(map-get(typography.$typography, $name), \"line-height\");\n    letter-spacing: map-get(\n        map-get(typography.$typography, $name),\n        \"letter-spacing\"\n    );\n}\n\n@mixin CreateTypographyClass($typographyName) {\n    .display-#{$typographyName} {\n        @include Typography($typographyName);\n    }\n}\n"]}