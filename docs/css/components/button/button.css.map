{"version":3,"sourceRoot":"","sources":["../../../../src/styles/components/button/button.scss","../../../../src/styles/components/button/_mixins.scss","../../../../src/styles/lib/_shapes.scss","../../../../src/styles/lib/_transition.scss","../../../../src/styles/lib/_typography.scss","../../../../src/styles/lib/_spacing.scss"],"names":[],"mappings":"AAOA,eCKI,kBACA,oBACA,mBACA,mBACA,YACA,eCLI,oBCeJ,WARiB,iDASjB,YAHiB,WCpBjB,eACA,gBACA,iBACA,iBHcA,sBACI,WACA,kBACA,MACA,SACA,OACA,QACA,sBACA,8BACA,UEJJ,WARiB,8CASjB,YAHiB,QFUjB,4BACI,WAGJ,6BACI,WAGJ,qCACI,aACA,mBACA,mBAGJ,wCACI,kBACA,UACA,QACA,SACA,4CD5CJ,uCCiDA,iBD7CA,mCCwDA,uBACA,UAEA,qDACI,eACA,eAGJ,qDACI,eACA,eAGJ,qDACI,eACA,eDnEJ,oCC6CA,aACA,WACA,kBACA,uBD5CA,iCCoEA,gBACA,gBI7BA,kBACA,mBLrCA,iCCsEA,gBACA,gBInCA,kBACA,mBLjCA,iCCwEA,gBACA,gBIzCA,kBACA,mBL7BA,uCC0EA,mBAEA,8CACI,aDzEJ,sCC8EA,eAEA,6CACI,aAGJ,4DACI,UAGJ,+DACI,UDjFI,0ECsFR,mCACA,wBDvFQ,4ECsFR,mCACA,0BDvFQ,0ECsFR,mCACA,wBDvFQ,0ECsFR,mCACA,wBDvFQ,wECsFR,mCACA,sBDlFI,2ECsFJ,mCACA,wBDhFQ,wEC+ER,mCACA,yBDhFQ,0EC+ER,qCACA,2BDhFQ,wEC+ER,mCACA,yBDhFQ,wEC+ER,mCACA,yBDhFQ,sEC+ER,iCACA,uBD3EI,yEC0EJ,mCACA,wBDtEA,mDACI,6BAGI,0ECsER,wBACA,+BDvEQ,4ECsER,0BACA,iCDvEQ,0ECsER,wBACA,+BDvEQ,0ECsER,wBACA,+BDvEQ,wECsER,sBACA,6BDlEI,2ECiEJ,wBACA,+BD7DA,+CACI,6BAGI,sEC6DR,wBD7DQ,wEC6DR,0BD7DQ,sEC6DR,wBD7DQ,sEC6DR,wBD7DQ,oEC6DR,sBDxDI,uECwDJ,wBD/CQ,yECgCR,mCACA,wBDjCQ,2ECgCR,mCACA,0BDjCQ,yECgCR,mCACA,wBDjCQ,yECgCR,mCACA,wBDjCQ,uECgCR,mCACA,sBD5BI,0ECgCJ,mCACA,wBD1BQ,uECyBR,mCACA,wBD1BQ,yECyBR,qCACA,0BD1BQ,uECyBR,mCACA,wBD1BQ,uECyBR,mCACA,wBD1BQ,qECyBR,iCACA,sBDrBI,wECoBJ,mCACA,wBDhBA,kDACI,6BAGI,yECgBR,wBACA,+BDjBQ,2ECgBR,0BACA,iCDjBQ,yECgBR,wBACA,+BDjBQ,yECgBR,wBACA,+BDjBQ,uECgBR,sBACA,6BDZI,0ECWJ,wBACA,+BDPA,8CACI,6BAGI,qECOR,wBDPQ,uECOR,0BDPQ,qECOR,wBDPQ,qECOR,wBDPQ,mECOR,sBDFI,sECEJ","file":"button.css","sourcesContent":["@use \"sass:map\";\n\n@use \"../../lib/design-tokens\";\n\n@use \"./mixins\";\n@use \"./variables\";\n\n.magnet-button {\n    @include mixins.Button();\n\n    &.magnet-button--outlined {\n        @include mixins.ButtonOutlined();\n    }\n\n    &.magnet-button--icon {\n        @include mixins.ButtonIcon();\n    }\n\n    &.magnet-button--block {\n        @include mixins.ButtonBlock();\n    }\n\n    &.magnet-button--sm {\n        @include mixins.ButtonSmall();\n    }\n\n    &.magnet-button--md {\n        @include mixins.ButtonMedium();\n    }\n\n    &.magnet-button--lg {\n        @include mixins.ButtonLarge();\n    }\n\n    &.magnet-button--disabled {\n        @include mixins.ButtonDisabled();\n    }\n\n    &.magnet-button--loading {\n        @include mixins.ButtonLoading();\n    }\n}\n\n.theme-light.magnet-button {\n    &.magnet-button--elevated {\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonElevated($color, light);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonFilled(disabled, light);\n        }\n    }\n\n    &.magnet-button--filled {\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonFilled($color, light);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonFilled(disabled, light);\n        }\n    }\n\n    &.magnet-button--outlined {\n        background-color: transparent;\n\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonOutlined($color, light);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonOutlined(disabled, light);\n        }\n    }\n\n    &.magnet-button--text {\n        background-color: transparent;\n\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonText($color, light);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonText(disabled, light);\n        }\n    }\n}\n\n.theme-dark.magnet-button {\n    &.magnet-button--elevated {\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonElevated($color, dark);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonFilled(disabled, dark);\n        }\n    }\n\n    &.magnet-button--filled {\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonFilled($color, dark);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonFilled(disabled, dark);\n        }\n    }\n\n    &.magnet-button--outlined {\n        background-color: transparent;\n\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonOutlined($color, dark);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonOutlined(disabled, dark);\n        }\n    }\n\n    &.magnet-button--text {\n        background-color: transparent;\n\n        @each $color in variables.$available-colors {\n            &.magnet-button--#{$color} {\n                @include mixins.ColoredButtonText($color, dark);\n            }\n        }\n\n        &.magnet-button--disabled {\n            @include mixins.ColoredButtonText(disabled, dark);\n        }\n    }\n}\n","@use \"sass:map\";\n\n@use \"../../lib/design-tokens\";\n@use \"../../lib/elevation\";\n@use \"../../lib/shapes\";\n@use \"../../lib/spacing\";\n@use \"../../lib/transition\";\n@use \"../../lib/typography\";\n\n@use \"./variables\";\n\n@mixin Button() {\n    position: relative;\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    border: none;\n    cursor: pointer;\n    @include shapes.Shape(full);\n    @include transition.Transition((box-shadow));\n    @include typography.Typography(body);\n\n    &:before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        border-radius: inherit;\n        background-color: currentColor;\n        opacity: 0;\n        @include transition.Transition((opacity));\n    }\n\n    &:hover:before {\n        opacity: 0.1;\n    }\n\n    &:active:before {\n        opacity: 0.2;\n    }\n\n    .magnet-button--inner {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n    }\n\n    .magnet-progress-spinner {\n        position: absolute;\n        opacity: 0;\n        top: 50%;\n        left: 50%;\n        transform: translateX(-50%) translateY(-50%);\n    }\n}\n\n@mixin ButtonOutlined() {\n    border: 1px solid;\n}\n\n@mixin ButtonBlock() {\n    display: flex;\n    width: 100%;\n    text-align: center;\n    justify-content: center;\n}\n\n@mixin ButtonIcon() {\n    justify-content: center;\n    padding: 0;\n\n    &.magnet-button--sm {\n        min-width: map-get(variables.$height, sm);\n        max-width: map-get(variables.$height, sm);\n    }\n\n    &.magnet-button--md {\n        min-width: map-get(variables.$height, md);\n        max-width: map-get(variables.$height, md);\n    }\n\n    &.magnet-button--lg {\n        min-width: map-get(variables.$height, lg);\n        max-width: map-get(variables.$height, lg);\n    }\n}\n\n@mixin ButtonSmall() {\n    min-height: map-get(variables.$height, sm);\n    max-height: map-get(variables.$height, sm);\n    @include spacing.PaddingHorizontal(3);\n}\n\n@mixin ButtonMedium() {\n    min-height: map-get(variables.$height, md);\n    max-height: map-get(variables.$height, md);\n    @include spacing.PaddingHorizontal(4);\n}\n\n@mixin ButtonLarge() {\n    min-height: map-get(variables.$height, lg);\n    max-height: map-get(variables.$height, lg);\n    @include spacing.PaddingHorizontal(5);\n}\n\n@mixin ButtonDisabled() {\n    cursor: not-allowed;\n\n    &:before {\n        content: none;\n    }\n}\n\n@mixin ButtonLoading() {\n    cursor: default;\n\n    &:before {\n        content: none;\n    }\n\n    .magnet-button--inner {\n        opacity: 0;\n    }\n\n    .magnet-progress-spinner {\n        opacity: 1;\n    }\n}\n\n@mixin ColoredButtonElevated($design-token, $color-mode) {\n    background-color: design-tokens.getTokenColor(surface, $color-mode);\n    color: design-tokens.getTokenColor($design-token, $color-mode);\n}\n\n@mixin ColoredButtonFilled($design-token, $color-mode) {\n    background-color: design-tokens.getTokenColor($design-token, $color-mode);\n    color: design-tokens.getTokenColor(on-#{$design-token}, $color-mode);\n}\n\n@mixin ColoredButtonOutlined($design-token, $color-mode) {\n    color: design-tokens.getTokenColor($design-token, $color-mode);\n    border-color: design-tokens.getTokenColor($design-token, $color-mode);\n}\n\n@mixin ColoredButtonText($design-token, $color-mode) {\n    color: design-tokens.getTokenColor($design-token, $color-mode);\n}\n","@use \"sass:map\";\n\n@use \"../variables/shapes\";\n\n@function shape($size) {\n    @return map.get(shapes.$shape-sizes, $size);\n}\n\n@mixin Shape($size) {\n    @if ($size == \"none\") {\n        border-radius: 0;\n    } @else if ($size == \"full\") {\n        border-radius: 999px;\n    } @else {\n        border-radius: shape($size) shape($size) shape($size) shape($size);\n    }\n}\n\n@mixin ShapeTop($size) {\n    border-radius: shape($size) shape($size) 0 0;\n}\n\n@mixin ShapeBottom($size) {\n    border-radius: 0 0 shape($size) shape($size);\n}\n\n@mixin ShapeLeft($size) {\n    border-radius: shape($size) 0 0 shape($size);\n}\n\n@mixin ShapeRight($size) {\n    border-radius: 0 shape($size) shape($size) 0;\n}\n","@mixin Transition(\n    $prop,\n    $time: 300ms,\n    $easing: cubic-bezier(0.4, 0, 0.2, 1),\n    $delay: 0s\n) {\n    $willChange: ();\n    $transition: ();\n    @for $i from 1 through length($prop) {\n        @for $j from 0 to (length($prop)) - (length($time)) {\n            $time: join($time, nth($time, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($easing)) {\n            $easing: join($easing, nth($easing, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($delay)) {\n            $delay: join($delay, nth($delay, -1));\n        }\n\n        $transition: append(\n            $transition,\n            (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),\n            $separator: comma\n        );\n\n        $willChange: append($willChange, nth($prop, $i), $separator: comma);\n    }\n    transition: $transition;\n    will-change: $willChange;\n}\n","@use \"sass:map\";\n\n@use \"../variables/typography\";\n\n@mixin Typography($name) {\n    font-size: map-get(map-get(typography.$typography, $name), \"font-size\");\n    font-weight: map-get(map-get(typography.$typography, $name), \"font-weight\");\n    line-height: map-get(map-get(typography.$typography, $name), \"line-height\");\n    letter-spacing: map-get(\n        map-get(typography.$typography, $name),\n        \"letter-spacing\"\n    );\n}\n\n@mixin CreateTypographyClass($typographyName) {\n    .display-#{$typographyName} {\n        @include Typography($typographyName);\n    }\n}\n","@use \"sass:map\";\n\n@use \"../variables/spacing\";\n\n@function spacing($size) {\n    @if ($size == \"auto\") {\n        @return auto;\n    }\n    @return spacing.$spacing * $size;\n}\n\n@mixin Margin($size) {\n    margin: spacing($size);\n}\n\n@mixin MarginTop($size) {\n    margin-top: spacing($size);\n}\n\n@mixin MarginBottom($size) {\n    margin-bottom: spacing($size);\n}\n\n@mixin MarginLeft($size) {\n    margin-left: spacing($size);\n}\n\n@mixin MarginRight($size) {\n    margin-right: spacing($size);\n}\n\n@mixin MarginHorizontal($size) {\n    margin-left: spacing($size);\n    margin-right: spacing($size);\n}\n\n@mixin MarginVertical($size) {\n    margin-top: spacing($size);\n    margin-bottom: spacing($size);\n}\n\n@mixin Padding($size) {\n    padding: spacing($size);\n}\n\n@mixin PaddingTop($size) {\n    padding-top: spacing($size);\n}\n\n@mixin PaddingBottom($size) {\n    padding-bottom: spacing($size);\n}\n\n@mixin PaddingLeft($size) {\n    padding-left: spacing($size);\n}\n\n@mixin PaddingRight($size) {\n    padding-right: spacing($size);\n}\n\n@mixin PaddingHorizontal($size) {\n    padding-left: spacing($size);\n    padding-right: spacing($size);\n}\n\n@mixin PaddingVertical($size) {\n    padding-top: spacing($size);\n    padding-bottom: spacing($size);\n}\n"]}