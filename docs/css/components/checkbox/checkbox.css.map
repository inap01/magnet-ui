{"version":3,"sourceRoot":"","sources":["../../../../src/styles/components/checkbox/checkbox.scss","../../../../src/styles/components/checkbox/_mixins.scss","../../../../src/styles/lib/_spacing.scss","../../../../src/styles/components/checkbox/_variables.scss","../../../../src/styles/lib/_shapes.scss","../../../../src/styles/lib/_transition.scss"],"names":[],"mappings":"AAMA,iBCCI,kBCaA,mBFXA,yCCGA,8EAIA,kBACA,oBACA,eACA,OEnBY,KFoBZ,MEpBY,KFqBZ,iBGPI,8BCaJ,WARiB,0GASjB,YAHiB,qGJCb,aDXI,6FCuBR,kBACA,SACA,UACA,UACA,oCIfA,WARiB,8FASjB,YAHiB,kBJoBjB,6HACI,UACA,gCD3BA,iECWJ,kBACA,aACA,eCTA,iBD4BA,mEACI,mBAEA,+FACI,mBAIR,mEACI,mBD5BA,sFACI,+BACA,6BAIJ,gFACI,+BACA,mCAIR,yDACI,yBAKI,6GACI,6BAIJ,uGACI,6BACA,iCAOJ,gHACI,+BAIJ,0GACI,+BACA,mCASR,qFACI,+BACA,6BAIJ,+EACI,+BACA,mCAIR,wDACI,wBAKI,4GACI,6BAIJ,sGACI,6BACA,iCAOJ,+GACI,+BAIJ,yGACI,+BACA","file":"checkbox.css","sourcesContent":["@use \"../../lib/design-tokens\";\n\n@use './mixins';\n@use './variables';\n\n// Basic Styles\n.magnet-checkbox {\n    @include mixins.Checkbox();\n\n    .magnet-checkbox--inner {\n        @include mixins.CheckboxInner();\n\n        .magnet-checkbox--input {\n            @include mixins.CheckboxInput();\n\n            .magnet-checkbox--checkmark {\n                @include mixins.CheckboxCheckmark();\n            }\n        }\n\n        .magnet-checkbox--label {\n            @include mixins.CheckboxLabel();\n        }\n    }\n\n    &.magnet-checkbox--disabled {\n        @include mixins.CheckboxDisabled();\n    }\n}\n\n// Light Theme\n.theme-light.magnet-checkbox {\n    &:not(.magnet-checkbox--has-value) {\n        .magnet-checkbox--input {\n            border-color: design-tokens.getTokenColor(border, light);\n            background-color: transparent;\n        }\n    }\n    &.magnet-checkbox--has-value {\n        .magnet-checkbox--input {\n            border-color: design-tokens.getTokenColor(primary, light);\n            background-color: design-tokens.getTokenColor(primary, light);\n        }\n    }\n\n    .magnet-checkbox--checkmark {\n        color: design-tokens.getTokenColor(on-primary, light);\n    }\n\n    &.magnet-checkbox--error {\n        &:not(.magnet-checkbox--has-value) {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(error, light);\n            }\n        }\n        &.magnet-checkbox--has-value {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(error, light);\n                background-color: design-tokens.getTokenColor(error, light);\n            }\n        }\n    }\n\n    &.magnet-checkbox--disabled {\n        &:not(.magnet-checkbox--has-value) {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(disabled, light);\n            }\n        }\n        &.magnet-checkbox--has-value {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(disabled, light);\n                background-color: design-tokens.getTokenColor(disabled, light);\n            }\n        }\n    }\n}\n\n// Dark Theme\n.theme-dark.magnet-checkbox {\n    &:not(.magnet-checkbox--has-value) {\n        .magnet-checkbox--input {\n            border-color: design-tokens.getTokenColor(border, dark);\n            background-color: transparent;\n        }\n    }\n    &.magnet-checkbox--has-value {\n        .magnet-checkbox--input {\n            border-color: design-tokens.getTokenColor(primary, dark);\n            background-color: design-tokens.getTokenColor(primary, dark);\n        }\n    }\n\n    .magnet-checkbox--checkmark {\n        color: design-tokens.getTokenColor(on-primary, dark);\n    }\n\n    &.magnet-checkbox--error {\n        &:not(.magnet-checkbox--has-value) {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(error, dark);\n            }\n        }\n        &.magnet-checkbox--has-value {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(error, dark);\n                background-color: design-tokens.getTokenColor(error, dark);\n            }\n        }\n    }\n\n    &.magnet-checkbox--disabled {\n        &:not(.magnet-checkbox--has-value) {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(disabled, dark);\n            }\n        }\n        &.magnet-checkbox--has-value {\n            .magnet-checkbox--input {\n                border-color: design-tokens.getTokenColor(disabled, dark);\n                background-color: design-tokens.getTokenColor(disabled, dark);\n            }\n        }\n    }\n}\n","@use \"../../lib/shapes\";\n@use \"../../lib/spacing\";\n@use \"../../lib/transition\";\n\n@use \"./variables\";\n\n@mixin Checkbox() {\n    position: relative;\n    @include spacing.MarginBottom(4);\n}\n\n@mixin CheckboxInner() {\n    display: flex;\n}\n\n@mixin CheckboxInput() {\n    position: relative;\n    display: inline-flex;\n    cursor: pointer;\n    height: variables.$checkbox-size;\n    width: variables.$checkbox-size;\n    border: 2px solid;\n    @include shapes.Shape(xs);\n    @include transition.Transition((border-color, background-color));\n\n    input {\n        display: none;\n    }\n}\n\n@mixin CheckboxLabel() {\n    position: relative;\n    display: flex;\n    cursor: pointer;\n    @include spacing.MarginLeft(variables.$checkbox-space);\n}\n\n@mixin CheckboxCheckmark() {\n    position: absolute;\n    top: -2px;\n    left: -2px;\n    opacity: 0;\n    transform: scale(0.5) rotate(-90deg);\n    @include transition.Transition((transform, opacity));\n\n    &.magnet-checkbox--checkmark-show {\n        opacity: 1;\n        transform: scale(1) rotate(0deg);\n    }\n}\n\n@mixin CheckboxDisabled() {\n    .magnet-checkbox--input {\n        cursor: not-allowed;\n\n        .magnet-checkbox--checkmark {\n            cursor: not-allowed;\n        }\n    }\n\n    .magnet-checkbox--label {\n        cursor: not-allowed;\n    }\n}\n","@use \"sass:map\";\n\n@use \"../variables/spacing\";\n\n@function spacing($size) {\n    @if ($size == \"auto\") {\n        @return auto;\n    }\n    @return spacing.$spacing * $size;\n}\n\n@mixin Margin($size) {\n    margin: spacing($size);\n}\n\n@mixin MarginTop($size) {\n    margin-top: spacing($size);\n}\n\n@mixin MarginBottom($size) {\n    margin-bottom: spacing($size);\n}\n\n@mixin MarginLeft($size) {\n    margin-left: spacing($size);\n}\n\n@mixin MarginRight($size) {\n    margin-right: spacing($size);\n}\n\n@mixin MarginHorizontal($size) {\n    margin-left: spacing($size);\n    margin-right: spacing($size);\n}\n\n@mixin MarginVertical($size) {\n    margin-top: spacing($size);\n    margin-bottom: spacing($size);\n}\n\n@mixin Padding($size) {\n    padding: spacing($size);\n}\n\n@mixin PaddingTop($size) {\n    padding-top: spacing($size);\n}\n\n@mixin PaddingBottom($size) {\n    padding-bottom: spacing($size);\n}\n\n@mixin PaddingLeft($size) {\n    padding-left: spacing($size);\n}\n\n@mixin PaddingRight($size) {\n    padding-right: spacing($size);\n}\n\n@mixin PaddingHorizontal($size) {\n    padding-left: spacing($size);\n    padding-right: spacing($size);\n}\n\n@mixin PaddingVertical($size) {\n    padding-top: spacing($size);\n    padding-bottom: spacing($size);\n}\n","$checkbox-size: 22px;\n$checkbox-space: 3;\n","@use \"sass:map\";\n\n@use \"../variables/shapes\";\n\n@function shape($size) {\n    @return map.get(shapes.$shape-sizes, $size);\n}\n\n@mixin Shape($size) {\n    @if ($size == \"none\") {\n        border-radius: 0;\n    } @else if ($size == \"full\") {\n        border-radius: 999px;\n    } @else {\n        border-radius: shape($size) shape($size) shape($size) shape($size);\n    }\n}\n\n@mixin ShapeTop($size) {\n    border-radius: shape($size) shape($size) 0 0;\n}\n\n@mixin ShapeBottom($size) {\n    border-radius: 0 0 shape($size) shape($size);\n}\n\n@mixin ShapeLeft($size) {\n    border-radius: shape($size) 0 0 shape($size);\n}\n\n@mixin ShapeRight($size) {\n    border-radius: 0 shape($size) shape($size) 0;\n}\n","@mixin Transition(\n    $prop,\n    $time: 300ms,\n    $easing: cubic-bezier(0.4, 0, 0.2, 1),\n    $delay: 0s\n) {\n    $willChange: ();\n    $transition: ();\n    @for $i from 1 through length($prop) {\n        @for $j from 0 to (length($prop)) - (length($time)) {\n            $time: join($time, nth($time, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($easing)) {\n            $easing: join($easing, nth($easing, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($delay)) {\n            $delay: join($delay, nth($delay, -1));\n        }\n\n        $transition: append(\n            $transition,\n            (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),\n            $separator: comma\n        );\n\n        $willChange: append($willChange, nth($prop, $i), $separator: comma);\n    }\n    transition: $transition;\n    will-change: $willChange;\n}\n"]}