{"version":3,"sourceRoot":"","sources":["../../../../src/styles/components/switch/switch.scss","../../../../src/styles/components/switch/_mixins.scss","../../../../src/styles/lib/_spacing.scss","../../../../src/styles/components/switch/_variables.scss","../../../../src/styles/lib/_shapes.scss","../../../../src/styles/lib/_transition.scss"],"names":[],"mappings":"AAGA,eCKI,kBCYA,mBFdA,qCCOA,aDJI,2DCQJ,kBACA,oBACA,eACA,OEpBY,KFqBZ,MEpBW,KFqBX,iBGVI,oBCeJ,WARiB,0GASjB,YAHiB,8BJCjB,iEACI,aDfI,qFC2BR,kBACA,UErCoB,KFsCpB,UEtCoB,KFuCpB,WEvCoB,KFwCpB,WExCoB,KFyCpB,MACA,OACA,oCGlCI,oBCeJ,WARiB,2FASjB,YAHiB,eJyBjB,kGACI,UIxBJ,WARiB,8CASjB,YAHiB,QJ8BjB,mHACI,UACA,gCAEA,gIACI,UD3CJ,2DCeJ,kBACA,aACA,eCVA,iBD0CA,6DACI,mBAEA,uFACI,mBAIR,6DACI,mBAOI,gFACI,+BACA,6BAGJ,oFACI,mCAOJ,0EACI,+BACA,mCAMJ,8EACI,mCAIA,wBAMA,qGACI,6BAOJ,+FACI,6BAIA,iCAMJ,mGACI,iCAIA,sBAUJ,wGACI,+BAOJ,kGACI,+BAIA,mCAMJ,sGACI,mCAIA,wBA1FR,+EACI,+BACA,6BAGJ,mFACI,mCAOJ,yEACI,+BACA,mCAMJ,6EACI,mCAIA,wBAMA,oGACI,6BAOJ,8FACI,6BAIA,iCAMJ,kGACI,iCAIA,sBAUJ,uGACI,+BAOJ,iGACI,+BAIA,mCAMJ,qGACI,mCAIA","file":"switch.css","sourcesContent":["@use './mixins';\n\n// Basic Styles\n.magnet-switch {\n    @include mixins.Switch();\n\n    .magnet-switch--inner {\n        @include mixins.SwitchInner();\n\n        .magnet-switch--input {\n            @include mixins.SwitchInput();\n\n            .magnet-switch--checkmark {\n                @include mixins.SwitchCheckmark();\n            }\n        }\n\n        .magnet-switch--label {\n            @include mixins.SwitchLabel();\n        }\n    }\n\n    &.magnet-switch--disabled {\n        @include mixins.SwitchDisabled();\n    }\n}\n\n// Light Theme\n.theme-light {\n    @include mixins.SwitchTheme(light);\n}\n\n// Light Dark\n.theme-dark {\n    @include mixins.SwitchTheme(dark);\n}\n","@use \"../../lib/design-tokens\";\n@use \"../../lib/shapes\";\n@use \"../../lib/spacing\";\n@use \"../../lib/transition\";\n\n@use \"./variables\";\n\n@mixin Switch() {\n    position: relative;\n    @include spacing.MarginBottom(4);\n}\n\n@mixin SwitchInner() {\n    display: flex;\n}\n\n@mixin SwitchInput() {\n    position: relative;\n    display: inline-flex;\n    cursor: pointer;\n    height: variables.$switch-height;\n    width: variables.$switch-width;\n    border: 2px solid;\n    @include shapes.Shape(full);\n    @include transition.Transition((border-color, background-color));\n\n    input {\n        display: none;\n    }\n}\n\n@mixin SwitchLabel() {\n    position: relative;\n    display: flex;\n    cursor: pointer;\n    @include spacing.MarginLeft(variables.$switch-space);\n}\n\n@mixin SwitchCheckmark() {\n    position: absolute;\n    min-width: variables.$switch-checkmark-size;\n    max-width: variables.$switch-checkmark-size;\n    min-height: variables.$switch-checkmark-size;\n    max-height: variables.$switch-checkmark-size;\n    top: 0;\n    left: 0;\n    transform: scale(0.8) rotate(-90deg);\n    @include shapes.Shape(full);\n    @include transition.Transition((transform, left));\n\n    .magnet-icon {\n        opacity: 0;\n        @include transition.Transition((opacity));\n    }\n\n    &.magnet-switch--checkmark-show {\n        left: 22px;\n        transform: scale(1) rotate(0deg);\n\n        .magnet-icon {\n            opacity: 1;\n        }\n    }\n}\n\n@mixin SwitchDisabled() {\n    .magnet-switch--input {\n        cursor: not-allowed;\n\n        .magnet-switch--checkmark {\n            cursor: not-allowed;\n        }\n    }\n\n    .magnet-switch--label {\n        cursor: not-allowed;\n    }\n}\n\n@mixin SwitchTheme($colorMode) {\n    &.magnet-switch {\n        &:not(.magnet-switch--has-value) {\n            .magnet-switch--input {\n                border-color: design-tokens.getTokenColor(border, $colorMode);\n                background-color: transparent;\n            }\n\n            .magnet-switch--checkmark {\n                background-color: design-tokens.getTokenColor(\n                    border,\n                    $colorMode\n                );\n            }\n        }\n        &.magnet-switch--has-value {\n            .magnet-switch--input {\n                border-color: design-tokens.getTokenColor(primary, $colorMode);\n                background-color: design-tokens.getTokenColor(\n                    primary,\n                    $colorMode\n                );\n            }\n\n            .magnet-switch--checkmark {\n                background-color: design-tokens.getTokenColor(\n                    surface,\n                    $colorMode\n                );\n                color: design-tokens.getTokenColor(on-surface, $colorMode);\n            }\n        }\n\n        &.magnet-switch--error {\n            &:not(.magnet-switch--has-value) {\n                .magnet-switch--input {\n                    border-color: design-tokens.getTokenColor(\n                        error,\n                        $colorMode\n                    );\n                }\n            }\n            &.magnet-switch--has-value {\n                .magnet-switch--input {\n                    border-color: design-tokens.getTokenColor(\n                        error,\n                        $colorMode\n                    );\n                    background-color: design-tokens.getTokenColor(\n                        error,\n                        $colorMode\n                    );\n                }\n\n                .magnet-switch--checkmark {\n                    background-color: design-tokens.getTokenColor(\n                        error-container,\n                        light\n                    );\n                    color: design-tokens.getTokenColor(\n                        on-error-container,\n                        $colorMode\n                    );\n                }\n            }\n        }\n\n        &.magnet-switch--disabled {\n            &:not(.magnet-switch--has-value) {\n                .magnet-switch--input {\n                    border-color: design-tokens.getTokenColor(\n                        disabled,\n                        $colorMode\n                    );\n                }\n            }\n            &.magnet-switch--has-value {\n                .magnet-switch--input {\n                    border-color: design-tokens.getTokenColor(\n                        disabled,\n                        $colorMode\n                    );\n                    background-color: design-tokens.getTokenColor(\n                        disabled,\n                        $colorMode\n                    );\n                }\n\n                .magnet-switch--checkmark {\n                    background-color: design-tokens.getTokenColor(\n                        on-disabled,\n                        $colorMode\n                    );\n                    color: design-tokens.getTokenColor(disabled, $colorMode);\n                }\n            }\n        }\n    }\n}\n","@use \"sass:map\";\n\n@use \"../variables/spacing\";\n\n@function spacing($size) {\n    @if ($size == \"auto\") {\n        @return auto;\n    }\n    @return spacing.$spacing * $size;\n}\n\n@mixin Margin($size) {\n    margin: spacing($size);\n}\n\n@mixin MarginTop($size) {\n    margin-top: spacing($size);\n}\n\n@mixin MarginBottom($size) {\n    margin-bottom: spacing($size);\n}\n\n@mixin MarginLeft($size) {\n    margin-left: spacing($size);\n}\n\n@mixin MarginRight($size) {\n    margin-right: spacing($size);\n}\n\n@mixin MarginHorizontal($size) {\n    margin-left: spacing($size);\n    margin-right: spacing($size);\n}\n\n@mixin MarginVertical($size) {\n    margin-top: spacing($size);\n    margin-bottom: spacing($size);\n}\n\n@mixin Padding($size) {\n    padding: spacing($size);\n}\n\n@mixin PaddingTop($size) {\n    padding-top: spacing($size);\n}\n\n@mixin PaddingBottom($size) {\n    padding-bottom: spacing($size);\n}\n\n@mixin PaddingLeft($size) {\n    padding-left: spacing($size);\n}\n\n@mixin PaddingRight($size) {\n    padding-right: spacing($size);\n}\n\n@mixin PaddingHorizontal($size) {\n    padding-left: spacing($size);\n    padding-right: spacing($size);\n}\n\n@mixin PaddingVertical($size) {\n    padding-top: spacing($size);\n    padding-bottom: spacing($size);\n}\n","$switch-height: 22px;\n$switch-width: 44px;\n$switch-space: 3;\n$switch-checkmark-size: 18px;\n","@use \"sass:map\";\n\n@use \"../variables/shapes\";\n\n@function shape($size) {\n    @return map.get(shapes.$shape-sizes, $size);\n}\n\n@mixin Shape($size) {\n    @if ($size == \"none\") {\n        border-radius: 0;\n    } @else if ($size == \"full\") {\n        border-radius: 999px;\n    } @else {\n        border-radius: shape($size) shape($size) shape($size) shape($size);\n    }\n}\n\n@mixin ShapeTop($size) {\n    border-radius: shape($size) shape($size) 0 0;\n}\n\n@mixin ShapeBottom($size) {\n    border-radius: 0 0 shape($size) shape($size);\n}\n\n@mixin ShapeLeft($size) {\n    border-radius: shape($size) 0 0 shape($size);\n}\n\n@mixin ShapeRight($size) {\n    border-radius: 0 shape($size) shape($size) 0;\n}\n","@mixin Transition(\n    $prop,\n    $time: 300ms,\n    $easing: cubic-bezier(0.4, 0, 0.2, 1),\n    $delay: 0s\n) {\n    $willChange: ();\n    $transition: ();\n    @for $i from 1 through length($prop) {\n        @for $j from 0 to (length($prop)) - (length($time)) {\n            $time: join($time, nth($time, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($easing)) {\n            $easing: join($easing, nth($easing, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($delay)) {\n            $delay: join($delay, nth($delay, -1));\n        }\n\n        $transition: append(\n            $transition,\n            (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),\n            $separator: comma\n        );\n\n        $willChange: append($willChange, nth($prop, $i), $separator: comma);\n    }\n    transition: $transition;\n    will-change: $willChange;\n}\n"]}