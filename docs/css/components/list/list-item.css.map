{"version":3,"sourceRoot":"","sources":["../../../../src/styles/components/list/list-item.scss","../../../../src/styles/components/list/_mixins.scss","../../../../src/styles/components/list/_variables.scss","../../../../src/styles/lib/_transition.scss","../../../../src/styles/lib/_spacing.scss"],"names":[],"mappings":"AAEA,kBCkBI,aACA,mBACA,mBACA,WCvBK,KDyBL,yBACI,WACA,kBACA,MACA,SACA,OACA,QACA,8BACA,UENJ,WARiB,8CASjB,YAHiB,QFYjB,2CACI,aACA,cACA,sBACA,WCzCC,KE8DL,kBACA,mBAIA,iBACA,oBJ/DA,8CC2CA,eAEA,2DACI,WAGJ,4DACI,WD9CJ,6CCmDA,mBAIA,2CACI,wBAGI,qEACI,wBADJ,uEACI,0BADJ,qEACI,wBADJ,qEACI,wBADJ,mEACI,sBAKJ,2EACI,WAIR,oEACI,+BAhBR,0CACI,wBAGI,oEACI,wBADJ,sEACI,0BADJ,oEACI,wBADJ,oEACI,wBADJ,kEACI,sBAKJ,0EACI,WAIR,mEACI","file":"list-item.css","sourcesContent":["@use \"./mixins\";\n\n.magnet-list-item {\n    @include mixins.ListItem();\n\n    &.magnet-list-item--clickable {\n        @include mixins.ListItemClickable();\n    }\n\n    &.magnet-list-item--disabled {\n        @include mixins.ListItemDisabled();\n    }\n}\n\n.theme-light.magnet-list {\n    @include mixins.ListItemTheme(light);\n}\n\n.theme-dark.magnet-list {\n    @include mixins.ListItemTheme(dark);\n}\n","@use \"../../lib/design-tokens\";\n@use \"../../lib/spacing\";\n@use \"../../lib/transition\";\n\n@use \"./variables\";\n\n@mixin List() {\n    display: flex;\n    flex-direction: column;\n}\n\n@mixin ListShowDividers() {\n    .magnet-list-item {\n        .magnet-list-item--inner {\n            border-bottom: 1px solid;\n        }\n    }\n}\n\n@mixin ListItem() {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    min-height: variables.$height;\n\n    &:before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background-color: currentColor;\n        opacity: 0;\n        @include transition.Transition((opacity));\n    }\n\n    .magnet-list-item--inner {\n        display: flex;\n        flex: 1 0 auto;\n        flex-direction: column;\n        min-height: variables.$height;\n        @include spacing.PaddingHorizontal(4);\n        @include spacing.PaddingVertical(3);\n    }\n}\n\n@mixin ListItemClickable() {\n    cursor: pointer;\n\n    &:hover:before {\n        opacity: 0.1;\n    }\n\n    &:active:before {\n        opacity: 0.2;\n    }\n}\n\n@mixin ListItemDisabled {\n    cursor: not-allowed;\n}\n\n@mixin ListItemTheme($colorMode) {\n    .magnet-list-item {\n        color: design-tokens.getTokenColor(on-surface, $colorMode);\n\n        @each $color in variables.$available-colors {\n            &.magnet-list-item--#{$color} {\n                color: design-tokens.getTokenColor($color, $colorMode);\n            }\n        }\n\n        &.magnet-list-item--active {\n            &:before {\n                opacity: 0.1;\n            }\n        }\n\n        .magnet-list-item--inner {\n            border-color: design-tokens.getTokenColor(border, $colorMode);\n        }\n    }\n}\n","$height: 40px;\n\n$available-colors: primary, secondary, success, warning, error;\n","@mixin Transition(\n    $prop,\n    $time: 300ms,\n    $easing: cubic-bezier(0.4, 0, 0.2, 1),\n    $delay: 0s\n) {\n    $willChange: ();\n    $transition: ();\n    @for $i from 1 through length($prop) {\n        @for $j from 0 to (length($prop)) - (length($time)) {\n            $time: join($time, nth($time, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($easing)) {\n            $easing: join($easing, nth($easing, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($delay)) {\n            $delay: join($delay, nth($delay, -1));\n        }\n\n        $transition: append(\n            $transition,\n            (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),\n            $separator: comma\n        );\n\n        $willChange: append($willChange, nth($prop, $i), $separator: comma);\n    }\n    transition: $transition;\n    will-change: $willChange;\n}\n","@use \"sass:map\";\n\n@use \"../variables/spacing\";\n\n@function spacing($size) {\n    @if ($size == \"auto\") {\n        @return auto;\n    }\n    @return spacing.$spacing * $size;\n}\n\n@mixin Margin($size) {\n    margin: spacing($size);\n}\n\n@mixin MarginTop($size) {\n    margin-top: spacing($size);\n}\n\n@mixin MarginBottom($size) {\n    margin-bottom: spacing($size);\n}\n\n@mixin MarginLeft($size) {\n    margin-left: spacing($size);\n}\n\n@mixin MarginRight($size) {\n    margin-right: spacing($size);\n}\n\n@mixin MarginHorizontal($size) {\n    margin-left: spacing($size);\n    margin-right: spacing($size);\n}\n\n@mixin MarginVertical($size) {\n    margin-top: spacing($size);\n    margin-bottom: spacing($size);\n}\n\n@mixin Padding($size) {\n    padding: spacing($size);\n}\n\n@mixin PaddingTop($size) {\n    padding-top: spacing($size);\n}\n\n@mixin PaddingBottom($size) {\n    padding-bottom: spacing($size);\n}\n\n@mixin PaddingLeft($size) {\n    padding-left: spacing($size);\n}\n\n@mixin PaddingRight($size) {\n    padding-right: spacing($size);\n}\n\n@mixin PaddingHorizontal($size) {\n    padding-left: spacing($size);\n    padding-right: spacing($size);\n}\n\n@mixin PaddingVertical($size) {\n    padding-top: spacing($size);\n    padding-bottom: spacing($size);\n}\n"]}