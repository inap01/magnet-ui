{"version":3,"sourceRoot":"","sources":["../../../../src/styles/components/card/card.scss","../../../../src/styles/components/card/_mixins.scss","../../../../src/styles/lib/_shapes.scss","../../../../src/styles/lib/_transition.scss"],"names":[],"mappings":"AAGA,aCMI,kBACA,kBACA,aACA,sBACA,WACA,eACA,aACA,qBACA,yBACA,mBCJI,kCCaJ,WARiB,yFASjB,YAHiB,aFHjB,mCACI,6BACA,iBAGJ,mCACI,eAkCJ,yBACI,mCACA,+BACA,wBAEA,6CACI,mCAIA,wBAVR,wBACI,mCACA,+BACA,wBAEA,4CACI,mCAIA","file":"card.css","sourcesContent":["@use 'mixins';\n\n// Basic Styles\n.magnet-card {\n    @include mixins.Card();\n}\n\n// Light Theme\n.theme-light {\n    @include mixins.CardTheme(light);\n}\n\n// Dark Theme\n.theme-dark {\n    @include mixins.CardTheme(dark);\n}\n","@use \"../../lib/design-tokens\";\n@use \"../../lib/shapes\";\n@use \"../../lib/spacing\";\n@use \"../../lib/transition\";\n@use \"../../lib/typography\";\n\n@use \"./variables\";\n\n@mixin Card() {\n    position: relative;\n    border-width: thin;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    max-width: 100%;\n    outline: none;\n    text-decoration: none;\n    overflow-wrap: break-word;\n    white-space: normal;\n    @include shapes.Shape(lg);\n    @include transition.Transition((width, height));\n\n    &.magnet-card--outlined {\n        background-color: transparent;\n        border: 1px solid;\n    }\n\n    &.magnet-card--disabled {\n        cursor: default;\n    }\n}\n\n@mixin CardTitle() {\n    display: flex;\n    align-items: flex-start;\n    @include spacing.PaddingTop(variables.$card-title-padding-top);\n    @include spacing.PaddingBottom(variables.$card-title-padding-bottom);\n    @include spacing.PaddingHorizontal(\n        variables.$card-title-padding-horizontal\n    );\n    @include typography.Typography(variables.$card-title-typography);\n}\n\n@mixin CardBody() {\n    @include spacing.Padding(variables.$card-body-padding);\n}\n\n@mixin CardActions() {\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    @include spacing.PaddingHorizontal(\n        variables.$card-actions-padding-horizontal\n    );\n    @include spacing.PaddingVertical(variables.$card-actions-padding-vertical);\n\n    > .magnet-button {\n        @include spacing.MarginLeft(2);\n    }\n}\n\n@mixin CardTheme($colorMode) {\n    &.magnet-card {\n        background-color: design-tokens.getTokenColor(surface, $colorMode);\n        border-color: design-tokens.getTokenColor(border, $colorMode);\n        color: design-tokens.getTokenColor(on-surface, $colorMode);\n\n        &.magnet-card--filled {\n            background-color: design-tokens.getTokenColor(\n                primary-container,\n                $colorMode\n            );\n            color: design-tokens.getTokenColor(\n                on-primary-container,\n                $colorMode\n            );\n        }\n    }\n}\n","@use \"sass:map\";\n\n@use \"../variables/shapes\";\n\n@function shape($size) {\n    @return map.get(shapes.$shape-sizes, $size);\n}\n\n@mixin Shape($size) {\n    @if ($size == \"none\") {\n        border-radius: 0;\n    } @else if ($size == \"full\") {\n        border-radius: 999px;\n    } @else {\n        border-radius: shape($size) shape($size) shape($size) shape($size);\n    }\n}\n\n@mixin ShapeTop($size) {\n    border-radius: shape($size) shape($size) 0 0;\n}\n\n@mixin ShapeBottom($size) {\n    border-radius: 0 0 shape($size) shape($size);\n}\n\n@mixin ShapeLeft($size) {\n    border-radius: shape($size) 0 0 shape($size);\n}\n\n@mixin ShapeRight($size) {\n    border-radius: 0 shape($size) shape($size) 0;\n}\n","@mixin Transition(\n    $prop,\n    $time: 300ms,\n    $easing: cubic-bezier(0.4, 0, 0.2, 1),\n    $delay: 0s\n) {\n    $willChange: ();\n    $transition: ();\n    @for $i from 1 through length($prop) {\n        @for $j from 0 to (length($prop)) - (length($time)) {\n            $time: join($time, nth($time, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($easing)) {\n            $easing: join($easing, nth($easing, -1));\n        }\n        @for $j from 0 to (length($prop)) - (length($delay)) {\n            $delay: join($delay, nth($delay, -1));\n        }\n\n        $transition: append(\n            $transition,\n            (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),\n            $separator: comma\n        );\n\n        $willChange: append($willChange, nth($prop, $i), $separator: comma);\n    }\n    transition: $transition;\n    will-change: $willChange;\n}\n"]}